/*
  grow.css
  - 小学生でも分かる説明:
    ・育成画面（grow）の見た目とボタン位置を決めるファイルです。
    ・ボタンの位置は1280x720を基準にpxで指定しています。変えたいときは :root の値を直してください。
*/
/* ページ全体のリセット（背景を黒で固定）と safe-area 対応 */
html,body{height:100%;margin:0;background:#000;overflow:hidden}
body{padding:env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);box-sizing:border-box}


:root{
  /* ボタンの左座標と上座標を px 単位で指定します */
  --grow-btn-blood-left: 75.78125%; /* 970 / 1280 */
  --grow-btn-blood-top: 33.3333%;   /* 240 / 720 */

  --grow-btn-warm-left: 75.78125%;  /* 970 / 1280 */
  --grow-btn-warm-top: 50%;         /* 360 / 720 */

  --grow-btn-kitchen-left: 75.78125%; /* 970 / 1280 */
  --grow-btn-kitchen-top: 66.6667%;   /* 480 / 720 */

  --grow-btn-follow-left: 75.78125%; /* 970 / 1280 */
  --grow-btn-follow-top: 66.6667%;   /* 480 / 720 */
  /* ねむるボタン位置 (デフォルトは画面下寄せ) */
  --grow-btn-sleep-left: 75.78125%; /* 970 / 1280 */
  --grow-btn-sleep-top: 55%;  /* 600 / 720 */
}

/* ボタンに変数を適用するだけです。数値を変えると位置が変わります。 */
#btn-blood{ position:absolute; left:var(--grow-btn-blood-left); top:var(--grow-btn-blood-top); }
#btn-warm{ position:absolute; left:var(--grow-btn-warm-left); top:var(--grow-btn-warm-top); }
#btn-kitchen{ position:absolute; left:var(--grow-btn-kitchen-left); top:var(--grow-btn-kitchen-top); }
#btn-follow{ position:absolute; left:var(--grow-btn-follow-left); top:var(--grow-btn-follow-top); }
/* ねむるボタンの位置は変数で制御します。:root の値を変更してください */
#btn-sleep{ position:absolute; left:var(--grow-btn-sleep-left); top:var(--grow-btn-sleep-top); }

/* busy 時（押せない時間帯）にボタンを明るくしてユーザーに示すクラス */
.btn-locked{
  /* 発光のみ（明るくするだけ）。影は付けない */
  filter: brightness(1.25);
  transition: filter 160ms ease;
}

/* 逆に押せないことを示すスタイル（オプション）: 半透明にする場合は以下を有効化 */
/* .btn-locked { opacity: 0.9; } */

/* --- 全体レイアウト（画面領域、背景、レイヤー） --- */
/* #screen はビューポート中央に固定し、visualViewport の変化でも位置がぶれないようにする */
#screen{position:fixed;left:50%;top:50%;width:1280px;height:720px;box-sizing:border-box;opacity:0;--transition-duration:400ms;transition:opacity var(--transition-duration) cubic-bezier(0.22,0.8,0.25,1);overflow:hidden;background:transparent;transform-origin:center center;transform: translate(-50%,-50%) scale(var(--screen-scale,1));}
#screen.visible{opacity:1}

/* 背景画像要素
   - 画面設計は 1280x720 固定。アートルールに従い原寸表示（拡大縮小しない）。
   - 必ず最背面。 */
.bg{position:absolute;left:0;top:0;width:1280px;height:720px;background-position:center center;background-repeat:no-repeat;background-size:1280px 720px;z-index:0;image-rendering:pixelated}

/* シーン要素は重ね順を持ち、ボタンなどは上に来るようにする */
.scene-layer{
  position:absolute;left:0;top:0;width:1280px;height:720px;z-index:1;pointer-events:none
}

/* 画像は絶対配置で置かれ、ドット補間の設定も scene.css と同じにする */
.scene-layer img{position:absolute;top:0;left:0;width:auto;height:auto;image-rendering:pixelated}

/* Ensure the vessel artwork is displayed at native 1280x720 canvas size
  (some asset files may contain different metadata; enforce explicit size
  to prevent accidental scaling or placement issues). */
#vessel{ position:absolute; left:0; top:0; width:1280px; height:720px; max-width:none; max-height:none; image-rendering:pixelated; object-fit: none; z-index:10 }

/* Default light for general scenes should be full brightness. */
#light-frame{ opacity: 1; transition: opacity 300ms ease }
/* Dialog (ドゥリーヨダナのセリフ画像) */
/* セリフ画像は 1280x720 のフルキャンバス画像です。
   ここで強制的にキャンバスサイズに合わせ、
   インラインで縮小指定されている場合でも上書きします。 */
#grow-dialog{
  position:absolute;
  left:0;
  top:0;
  width:1280px;
  height:720px;
  max-width:none;
  max-height:none;
  /* 原寸 1280x720 でそのまま表示（拡大縮小しない） */
  image-rendering:pixelated;
  z-index:70; /* grow.html 内の意図している重ね順に合わせる */
  pointer-events:none; /* セリフはインタラクティブにしない */
  display:none; /* JS で表示/非表示を切り替える */
  opacity:0; /* default hidden for fade */
  transition: opacity 300ms ease; /* used when fading in/out */
}

/* visible state for dialog when using CSS-based fade */
#grow-dialog.visible{ display:block; opacity:1 }

/* UI ボタンはクリック可能にするため pointer-events を有効にする */
.scene-layer .btn-ui, .btn-ui{ pointer-events:auto; cursor:pointer; }
.btn-ui:active{filter:brightness(1.5)}
/* 共通: 一時的に無効化したい場合に使う */
.btn-ui.disabled{ pointer-events:none; cursor:default }

/* 小さい画面向け: transform:scale() を使って #screen を縮小し、内部座標系を保つ。
   これによりボタン等はキャンバス内に固定され、ウィンドウサイズの影響を受けにくくなります。 */
@media (max-width: 1280px){
  :root{ --screen-fit-w: calc((100vw - 20px) / 1280); --screen-fit-h: calc((100vh - 20px) / 720); }
  #screen{ width:1280px; height:720px; transform: translate(-50%,-50%) scale(min(var(--screen-fit-w), var(--screen-fit-h))); transform-origin:center center }
  .bg, .scene-layer{ width:1280px; height:720px }
  .scene-layer img, .btn-ui{ max-width:none; height:auto }
}

/* --- shake アニメーション（ダイアログ / ゲージ 揺らしに使用） --- */


/* ホラー的なブレ（ブラー／スキューを伴う乱れ）
   - 振り子っぽい動きではなく、画像が揺れてブレたり歪んだりする表現を目指します。
   - filter: blur を使って一時的に像を滲ませ、skew/rotate で不安定さを出しています。
*/
@keyframes shake-horror {
  0%{ transform: translate(0,0) rotate(0deg) skew(0deg,0deg); filter: blur(0px) saturate(1); }
  10%{ transform: translate(0,0) rotate(-4deg) skew(-8deg,3deg); filter: blur(2.0px) saturate(0.75); }
  20%{ transform: translate(0,0) rotate(5deg) skew(8deg,-3deg); filter: blur(3.0px) saturate(0.5); }
  30%{ transform: translate(0,0) rotate(-6deg) skew(-10deg,4deg); filter: blur(1.0px) saturate(0.7); }
  45%{ transform: translate(0,0) rotate(4deg) skew(6deg,-6deg); filter: blur(2.2px) saturate(0.4); }
  60%{ transform: translate(0,0) rotate(-3deg) skew(-4deg,3deg); filter: blur(1.8px) saturate(0.5); }
  80%{ transform: translate(0,0) rotate(2deg) skew(2deg,-2deg); filter: blur(1.0px) saturate(1); }
 100%{ transform: translate(0,0) rotate(0deg) skew(0deg,0deg); filter: blur(0px) saturate(1); }
}

.shake.horror{
  animation-name: shake-horror;
  animation-duration: 0.5s;
  animation-timing-function: ease-out;
  animation-fill-mode: both;
  /* keyframes 内で filter を変化させるため、ここでは初期値を指定しない */
  will-change: transform, filter;
}

/* 因果ゲージ (#gauge-karma) に対しては .shake.horror 以外の揺れを無効化する
   - 万が一 JS 側や他の場所で .shake や .horizontal/.micro クラスが付与されても
     ホラー表現以外は適用されないようにするための上書きルールです。
*/
#gauge-karma.shake:not(.horror),
#gauge-karma.horizontal,
#gauge-karma.micro {
  animation: none !important;
  transform: none !important;
  filter: none !important;
}

/* ホラー時はピクセル補間(=pixelated) を解除して filter: blur が効果的に見えるようにする */
#gauge-karma.shake.horror,
#gauge-karma.horror {
  image-rendering: auto !important;
  /* ensure filters are allowed to render smoothly */
  -webkit-filter: none !important;
  filter: none !important;
}

/* 因果セリフ画像 (#grow-dialog) に対しては .shake.horror 以外の揺れを無効化する */
#grow-dialog.shake:not(.horror),
#grow-dialog.horizontal,
#grow-dialog.micro {
  animation: none !important;
  transform: none !important;
  filter: none !important;
}

/* 因果セリフがホラー揺れの時はピクセル補間を解除し、filter が効くようにする */
#grow-dialog.shake.horror,
#grow-dialog.horror {
  image-rendering: auto !important;
  will-change: transform, filter;
  -webkit-filter: none !important;
  filter: none !important;
}


/* 追加のヒント:
   - ゲージ専用にさらに調整したい場合は `.shake.gauge` のような専用クラスを作り、
     transform の振幅を小さくして duration を短くすることを推奨します。
   - 透過や z-index によっては要素が目立ちにくいことがあるため、その場合は
     box-shadow や filter: drop-shadow(...) を併用して強調してください。
*/

